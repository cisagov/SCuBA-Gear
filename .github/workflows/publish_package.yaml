# Purpose:  Publish the package to a private gallery

name: Publish Package

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
  push:
    paths:
      - ".github/workflows/run_publish_package.yaml"
      - "utils/DeployUtils.ps1"

env:
  GalleryName: PrivateScubaGearGallery
  ModuleName: ScubaGear

jobs:
  private-package:
    name: Private Package Publish
    runs-on: windows-latest
    environment: Development
    permissions:
      id-token: write
      contents: write
    # This condition prevents duplicate runs.
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    defaults:
      run:
        shell: powershell
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: repo
      - name: OIDC Login to Azure Public Cloud with AzPowershell (enableAzPSSession true)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
      - name: Create temporary private gallery
        run: |
          cd repo
          . utils/DeployUtils.ps1
          New-PrivateGallery -GalleryName $env:GalleryName -Trusted
      - name: Install Azure Signing Tool
        run: |
          dotnet --version
          dotnet tool install --global AzureSignTool --version 4.0.1
      - name: Sign and publish module to private gallery
        uses: azure/powershell@v1
        env:
          KEY_VAULT_INFO: ${{ secrets.SCUBA_KEY_VAULT_DEV}}
        with:
          inlineScript: |
            Write-Output "$(pwd)"
            . repo/utils/DeployUtils.ps1
            $KeyVaultInfo = ${env:KEY_VAULT_INFO} | ConvertFrom-Json
            # Remove non-release files
            Remove-Item -Recurse -Force repo -Include .git*
            Publish-ScubaGearModule `
              -AzureKeyVaultUrl $($KeyVaultInfo.KeyVault.URL) `
              -CertificateName $($KeyVaultInfo.KeyVault.CertificateName) `
              -ModulePath repo/PowerShell/ScubaGear `
              -GalleryName $env:GalleryName
          azPSVersion: "latest"
      - name: Test Module Publish
        run: |
          Get-Location
          $TestContainers = @()
          $TestContainers += New-PesterContainer -Path "repo/Testing/Functional/BuildTest" -Data @{ }
          $PesterConfig = @{
            Run = @{
              Container = $TestContainers
            }
            Output = @{
              Verbosity = 'Detailed'
            }
          }
          $Config = New-PesterConfiguration -Hashtable $PesterConfig
          Invoke-Pester -Configuration $Config
      - name: Check Scuba Version
        run: |
          Install-Module -Name ScubaGear -SkipPublisherCheck
          Import-Module -Name ScubaGear
          Invoke-SCuBA -Version
      - name: Sign and publish prerelease module to private gallery
        uses: azure/powershell@v1
        env:
          KEY_VAULT_INFO: ${{ secrets.SCUBA_KEY_VAULT_DEV}}
        with:
          inlineScript: |
            Write-Output "$(pwd)"
            . repo/utils/DeployUtils.ps1
            $KeyVaultInfo = ${env:KEY_VAULT_INFO} | ConvertFrom-Json
            # Remove non-release files
            Remove-Item -Recurse -Force repo -Include .git*
            Publish-ScubaGearModule `
              -AzureKeyVaultUrl $($KeyVaultInfo.KeyVault.URL) `
              -CertificateName $($KeyVaultInfo.KeyVault.CertificateName) `
              -ModulePath repo/PowerShell/ScubaGear `
              -GalleryName $env:GalleryName `
              -OverrideModuleVersion '9.9.9' `
              -Prerelease 'alpha'
          azPSVersion: "latest"
      - name: Check Scuba Version
        run: |
          $ScubaModules = Find-Module -Name ScubaGear -AllVersions -AllowPrerelease -Repository $env:GalleryName
          ($ScubaModules).Version
          if ($ScubaModules.Count -eq 2) {
            Exit 0
          }
          else {
            Exit 1
          }
