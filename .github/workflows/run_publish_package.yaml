name: Publish Package

on:
  schedule:
    - cron: "23 0 * * *" # Execute each day at 00:23 UTC
  workflow_dispatch:
    inputs:
      OverrideModuleVersion:
        description: "Override the version of the release. Restricted to SemVer 1.0 - 3 segments"
        required: false
        type: string
      IsPrerelease:
        description: "Is this a prerelease"
        required: false
        type: boolean
        default: false
      PrereleaseTag:
        description: "The prerelease tag: [0-9A-Za-z]+"
        required: false
        type: string
  push:
    paths:
      - ".github/workflows/run_publish_package.yaml"
      - "utils/DeployUtils.ps1"

env:
  GalleryName: PrivateScubaGearGallery
  ModuleName: ScubaGear

jobs:
  extract-secrets:
    name: Extract Secrets
    runs-on: windows-latest
    environment: Development
    permissions:
      id-token: write
      contents: write
    defaults:
      run:
        shell: powershell
    outputs:
      KeyVaultUrl: ${{ steps.key_vault_info.outputs.KeyVaultUrl}}
      KeyVaultCertificateName: ${{ steps.key_vault_info.outputs.KeyVaultCertificateName}}
    steps:
      - name: Get Key Vault info
        env:
          KEY_VAULT_INFO: ${{ secrets.SCUBA_KEY_VAULT_PROD}}
        run: |
          $KeyVaultInfo = ${env:KEY_VAULT_INFO} | ConvertFrom-Json
          echo "KeyVaultUrl=$($KeyVaultInfo.KeyVault.URL)" >> $env:GITHUB_OUTPUT
          echo "KeyVaultCertificateName=$($KeyVaultInfo.KeyVault.CertificateName)" >> $env:GITHUB_OUTPUT
        id: "key_vault_info"

  # Publish nightly to a a private gallery just to make
  # sure that the code can be published.  This is like a
  # smoke test.
  publish-to-private:
    name: Publish to Private Gallery
    # if: github.event.schedule == '23 0 * * *'
    needs:
      - extract-secrets
    runs-on: windows-latest
    environment: Development
    permissions:
      id-token: write
      contents: write
    defaults:
      run:
        shell: powershell
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: repo
      - name: Install Azure Signing Tool
        run: |
          dotnet --version
          dotnet tool install --global AzureSignTool --version 4.0.1
      # OIDC Login to Azure Public Cloud with AzPowershell (enableAzPSSession true)
      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
      - name: Create Private Gallery
        run: |
          cd repo
          . utils/DeployUtils.ps1
          New-PrivateGallery -GalleryName $env:GalleryName -Trusted
      - name: Sign and Publish Module
        uses: azure/powershell@v1
        with:
          inlineScript: |
            # Source the deploy utilities so the functions in it can be called.
            . repo/utils/DeployUtils.ps1
            # Remove non-release files
            Remove-Item -Recurse -Force repo -Include .git*
            $Parameters = @{
              AzureKeyVaultUrl = '${{ needs.extract-secrets.outputs.KeyVaultUrl }}'
              CertificateName = '${{ needs.extract-secrets.outputs.KeyVaultCertificateName }}'
              ModulePath = 'repo/PowerShell/ScubaGear'
              GalleryName = $env:GalleryName
            }
            $Parameters
            # This publishes to a private gallery.
            Publish-ScubaGearModule @Parameters
          azPSVersion: "latest"
      - name: Test Module Publish
        run: |
          Get-Location
          $TestContainers = @()
          $TestContainers += New-PesterContainer -Path "repo/Testing/Functional/BuildTest" -Data @{ }
          $PesterConfig = @{
            Run = @{
              Container = $TestContainers
            }
            Output = @{
              Verbosity = 'Detailed'
            }
          }
          $Config = New-PesterConfiguration -Hashtable $PesterConfig
          Invoke-Pester -Configuration $Config
      - name: Print Scuba Version
        run: |
          Install-Module -Name ScubaGear -SkipPublisherCheck
          # Import-Module -Name ScubaGear
          Invoke-SCuBA -Version
      # - name: Sign and publish prerelease module to private gallery
      #   uses: azure/powershell@v1
      #   env:
      #     KEY_VAULT_INFO: ${{ secrets.SCUBA_KEY_VAULT_DEV}}
      #   with:
      #     inlineScript: |
      #       Write-Output "$(pwd)"
      #       . repo/utils/DeployUtils.ps1
      #       $KeyVaultInfo = ${env:KEY_VAULT_INFO} | ConvertFrom-Json
      #       # Remove non-release files
      #       Remove-Item -Recurse -Force repo -Include .git*
      #       Publish-ScubaGearModule `
      #         -AzureKeyVaultUrl $($KeyVaultInfo.KeyVault.URL) `
      #         -CertificateName $($KeyVaultInfo.KeyVault.CertificateName) `
      #         -ModulePath repo/PowerShell/ScubaGear `
      #         -GalleryName $env:GalleryName `
      #         -OverrideModuleVersion '9.9.9' `
      #         -Prerelease 'alpha'
      #     azPSVersion: "latest"
      # - name: Check Scuba Version
      # run: |
      #   $ScubaModules = Find-Module -Name ScubaGear -AllVersions -AllowPrerelease
      #   ($ScubaModules).Version
      #   if ($ScubaModules.Count -eq 2) {
      #     Exit 0
      #   }
      #   else {
      #     Exit 1
      #   }

  # Publish on demand to the real gallery (PSGallery).
  publish-to-psgallery:
    name: Publish to PSGallery
    if: github.event_name == 'workflow_dispatch'
    needs:
      - extract-secrets
    runs-on: windows-latest
    environment: Development
    permissions:
      id-token: write
      contents: write
    defaults:
      run:
        shell: powershell
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: repo
      - name: Install Azure Signing Tool
        run: |
          dotnet --version
          dotnet tool install --global AzureSignTool --version 4.0.1
      # OIDC Login to Azure Public Cloud with AzPowershell (enableAzPSSession true)
      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
      - name: Sign and Publish Module
        run: |
          # Source the deploy utilities so the functions in it can be called.
          . repo/utils/DeployUtils.ps1
          # Remove non-release files
          Remove-Item -Recurse -Force repo -Include .git*
          # Extract the API key used to publish to PSGallery
          $ApiKey = az keyvault secret show --id '${{ needs.extract-secrets.outputs.KeyVaultUrl }}/secrets/ScubaGear-PSGAllery-API-Key' --query value -o tsv
          if (-Not $ApiKey)
          {
            Write-Error "Failed to retrieve API key"
          }
          $Parameters = @{
            AzureKeyVaultUrl = '${{ needs.extract-secrets.outputs.KeyVaultUrl }}'
            CertificateName = '${{ needs.extract-secrets.outputs.KeyVaultCertificateName }}'
            ModulePath = 'repo/PowerShell/ScubaGear'
            GalleryName = 'PSGallery'
            NuGetApiKey = $ApiKey
          }
          if ('true' -eq '${{ inputs.IsPrerelease }}')
          {
            $Parameters.Add('PrereleaseTag', '${{ inputs.PrereleaseTag }}')
          }
          if (-Not [string]::IsNullOrEmpty('${{ inputs.OverrideModuleVersion }}'))
          {
            $Parameters.Add('OverrideModuleVersion', '${{ inputs.OverrideModuleVersion }}')
          }
          # This publishes to PSGallery.
          Publish-ScubaGearModule @Parameters
      # This is a manual test that writes the version to the console
      - name: Print Scuba Version
        run: |
          if ('true' -eq '${{ inputs.IsPrerelease }}')
          {
            $Version = '${{ inputs.OverrideModuleVersion }}' + '${{ inputs.PrereleaseTag }}'
            Write-Host "Installing as prerelease with required version: " + $version
            Install-Module -Name ScubaGear -AllowPrerelease -RequiredVersion $version
          }
          else
          {
            Write-Host "Installing latest version"
            Install-Module -Name ScubaGear
          }
          # Import-Module -Name ScubaGear
          Invoke-SCuBA -Version
